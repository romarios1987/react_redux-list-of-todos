{"version":3,"sources":["reducers/loading.ts","actions/types.ts","reducers/todos.ts","reducers/query.ts","reducers/sort.ts","reducers/index.ts","store.ts","actions/index.ts","helpers/api.ts","components/Button.tsx","components/TodoList.tsx","components/Filter.tsx","App.tsx","index.tsx"],"names":["loadingReducer","loading","action","type","todosReducer","todos","filter","todo","todoId","id","queryReducer","query","initialState","field","order","sortReducer","state","getLoading","getTodos","getQuery","getVisibleTodos","compare","sort","a","b","title","localeCompare","Number","completed","visibleTodos","includes","reverse","rootReducer","combineReducers","todoReducer","store","createStore","composeWithDevTools","sortBy","getAll","url","fetch","then","res","json","Button","text","disabled","onClick","status","className","TodoList","dispatch","useDispatch","useSelector","scope","map","user","key","name","Filter","value","onChange","target","setQuery","getAppData","todosFromServer","usersFromServer","find","userId","App","length","initTodos","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e26544cf.chunk.js","sourcesContent":["import {AnyAction} from \"redux\";\nimport {FINISH_LOADING, START_LOADING} from \"../actions/types\";\n\nconst loadingReducer = (loading = false, action: AnyAction): boolean => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n    case FINISH_LOADING:\n      return false;\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n\n\n","export const START_LOADING = 'START_LOADING';\nexport const FINISH_LOADING = 'FINISH_LOADING';\nexport const INIT_TODOS = 'INIT_TODOS';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const SET_QUERY = 'SET_QUERY';\nexport const SORT_BY = 'SORT_BY';\n\n\n","import {AnyAction} from \"redux\";\nimport {DELETE_TODO, INIT_TODOS} from \"../actions/types\";\n\nconst todosReducer = (todos: Todo[] = [], action: AnyAction): Todo[] => {\n  switch (action.type) {\n    case INIT_TODOS:\n      return action.todos;\n    case DELETE_TODO:\n      return todos.filter(todo => action.todoId !== todo.id)\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import {AnyAction} from \"redux\";\nimport {SET_QUERY} from \"../actions/types\";\n\nconst queryReducer = (query = '', action: AnyAction): string => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n    default:\n      return query;\n  }\n};\n\nexport default queryReducer;\n","import {AnyAction} from \"redux\";\nimport {SORT_BY} from \"../actions/types\";\n\ntype SortState = {\n  field: string;\n  order: string;\n}\n\nconst initialState: SortState = {\n  field: 'id',\n  order: 'ASC'\n}\n\nconst sortReducer = (state = initialState, action: AnyAction): SortState => {\n  switch (action.type) {\n    case SORT_BY:\n      if (action.field === state.field) {\n        return {\n          ...state,\n          order: state.order === 'ASC' ? 'DESC' : 'ASC',\n        };\n      }\n\n      return {\n        ...state,\n        field: action.field,\n        order: 'ASC',\n      };\n    default:\n      return state;\n  }\n};\n\n\nexport default sortReducer;\n","import {combineReducers} from \"redux\";\nimport loadingReducer from \"./loading\";\nimport todoReducer from \"./todos\";\nimport queryReducer from \"./query\";\nimport sortReducer from \"./sort\";\n\n\ntype TodoComparator = (a: Todo, b: Todo) => number;\n\n\n// Selectors\nexport const getLoading = (state: RootState) => state.loading;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getQuery = (state: RootState) => state.query;\n\n\nexport const getVisibleTodos = (state: RootState) => {\n  let compare: TodoComparator = () => 0;\n\n  switch (state.sort.field) {\n    case 'title':\n      compare = (a: Todo, b: Todo) => a.title.localeCompare(b.title);\n      break;\n    case 'completed':\n      compare = (a: Todo, b: Todo) => Number(b.completed) - Number(a.completed);\n      break;\n    case 'id':\n      compare = (a: Todo, b: Todo) => a.id - b.id;\n      break;\n    default:\n\n  }\n\n  const visibleTodos = state.todos\n    .filter(todo => todo.title.includes(state.query))\n    .sort(compare)\n\n  if (state.sort.order === 'DESC') {\n    visibleTodos.reverse();\n  }\n\n  return visibleTodos;\n};\n\n\nexport const rootReducer = combineReducers({\n  loading: loadingReducer,\n  todos: todoReducer,\n  query: queryReducer,\n  sort: sortReducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {rootReducer} from \"./reducers\";\n\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import {\n  START_LOADING,\n  INIT_TODOS,\n  DELETE_TODO,\n  FINISH_LOADING,\n  SET_QUERY, SORT_BY,\n} from './types'\n\n\nexport const startLoading = () => ({type: START_LOADING});\nexport const finishLoading = () => ({type: FINISH_LOADING});\n\nexport const initTodos = (todos: Todo[]) => ({\n  type: INIT_TODOS,\n  todos\n});\n\nexport const deleteTodo = (todoId: number) => ({\n  type: DELETE_TODO,\n  todoId\n});\n\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  query\n});\n\n\nexport const sortBy = (field: string) => ({\n  type: SORT_BY,\n  field\n});\n","const apiUrl = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api'\n\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(`${apiUrl}${url}.json`).then(res => res.json())\n\n}\n\nexport const getTodos = () => getAll<Todo>('/todos');\nexport const getUsers = () => getAll<User>('/users');\n\n","import React from 'react';\n\n\ntype Pros = {\n  text: string;\n  disabled?: boolean;\n  status?: string;\n  onClick: () => void\n}\n\nconst Button: React.FC<Pros> = ({text, disabled = false, onClick, status= 'primary'}) => {\n  return (\n    <button\n      className={\"btn btn-outline-\" + status}\n      type=\"button\"\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {text}\n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getVisibleTodos} from \"../reducers\";\nimport Button from \"./Button\";\nimport {deleteTodo, sortBy} from \"../actions\";\n\n\nconst TodoList: React.FC = () => {\n\n  const dispatch = useDispatch();\n  const todos = useSelector(getVisibleTodos)\n\n  return (\n    <table className=\"table table-sortable\">\n      <thead>\n      <tr>\n        <th scope=\"col\" className=\"pointer asc\" onClick={() => dispatch(sortBy('id'))}>#ID</th>\n        <th scope=\"col\" className=\"pointer\" onClick={() => dispatch(sortBy('title'))}>Todo</th>\n        <th scope=\"col\">Username</th>\n        <th scope=\"col\" className=\"pointer\" onClick={() => dispatch(sortBy('completed'))}>Completed</th>\n        <th scope=\"col\">Action</th>\n      </tr>\n      </thead>\n      <tbody>\n      {todos.map(({id, title, completed, user}) => (\n\n        <tr key={id}>\n          <th scope=\"row\">{id}</th>\n          <td>{title}</td>\n          <td>{user?.name}</td>\n          <td>{completed\n            ? <span className=\"badge badge-pill badge-success\">Success</span>\n            : <span className=\"badge badge-pill badge-danger\">Danger</span>}\n          </td>\n          <td>\n            <Button\n              text={'X'}\n              status=\"danger\"\n              onClick={() => {\n                dispatch(deleteTodo(id))\n              }}/></td>\n        </tr>\n      ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default TodoList;\n","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {setQuery} from \"../actions\";\nimport {getQuery} from \"../reducers\";\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const query = useSelector(getQuery)\n  return (\n    <div className=\"form-group mt-4\">\n      <input\n        className=\"form-control\"\n        type=\"text\"\n        value={query}\n        onChange={({target}) => dispatch(setQuery(target.value))}\n      />\n    </div>\n  )\n}\n\n\nexport default Filter;\n","import React from 'react';\nimport {useDispatch, useSelector, } from 'react-redux';\nimport './App.scss';\n\nimport {finishLoading, initTodos, startLoading} from './actions';\nimport {getLoading, getTodos} from './reducers';\n\nimport * as api from \"./helpers/api\";\nimport Button from \"./components/Button\";\nimport TodoList from \"./components/TodoList\";\nimport Filter from \"./components/Filter\";\n\nconst getAppData = async (): Promise<Todo[]> => {\n  const todosFromServer = await api.getTodos();\n  const usersFromServer = await api.getUsers();\n  return todosFromServer.map((todo) => {\n    return {\n      ...todo,\n      user: usersFromServer.find(user => user.id === todo.userId) || null,\n    }\n  });\n}\n\n\nconst App = () => {\n  const dispatch = useDispatch()\n  const todos = useSelector(getTodos)\n  const loading = useSelector(getLoading)\n\n  const initData = () => {\n    dispatch(startLoading());\n\n    getAppData()\n      .then(todosFromServer => {\n        dispatch(initTodos(todosFromServer));\n      })\n      .finally(() => {\n        dispatch(finishLoading());\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"text-center\">Redux list of todos {todos.length}</h1>\n\n        {!todos.length&&\n        <Button\n          text={loading ? 'Loading...' : 'Init data'}\n          disabled={loading}\n          onClick={initData}\n        />\n        }\n\n        {todos.length > 0 && <Filter/>}\n        {todos.length > 0 && <TodoList />}\n      </div>\n    </div>\n\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}